PackageManifest subclass: #ManifestPharoDoc	instanceVariableNames: ''	classVariableNames: ''	package: 'PharoDoc-Manifest'!!ManifestPharoDoc commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestPharoDoc class	instanceVariableNames: ''!!ManifestPharoDoc class methodsFor: 'code-critics' stamp: 'bookcollect 1/11/2025 14:39'!ruleRBNotEliminationRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#PharoDocGeneratorTest #testGenerateDocumentation #false)) #'2025-01-11T14:39:32.086677+08:00') )! !!ManifestPharoDoc class methodsFor: 'code-critics' stamp: 'bookcollect 1/11/2025 14:39'!ruleRBImplementedNotSentRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#PharoDocGeneratorTest #testGenerateDocumentation #false)) #'2025-01-11T14:39:38.565677+08:00') )! !Object subclass: #PharoDocGeneratorTest	instanceVariableNames: 'generator'	classVariableNames: ''	package: 'PharoDoc-Tests'!!PharoDocGeneratorTest methodsFor: 'initialization' stamp: 'bookcollect 1/11/2025 14:39'!setUp    super setUp.    generator := PharoDocGenerator new.! !!PharoDocGeneratorTest methodsFor: 'tests' stamp: 'bookcollect 1/11/2025 14:39'!testGenerateClassDocumentation    | doc |    generator package: 'Collections-Sequenceable'.    doc := generator generateClassDocumentation: Array.        self assert: (doc includesSubstring: 'Class: Array').    self assert: (doc includesSubstring: 'Superclass: ArrayedCollection').    self assert: (doc includesSubstring: 'Instance Variables:').    self assert: (doc includesSubstring: 'Methods:').! !!PharoDocGeneratorTest methodsFor: 'tests' stamp: 'bookcollect 1/11/2025 14:39'!testGenerateDocumentation    | doc |    generator package: 'Collections-Sequenceable'.    doc := generator generateDocumentation.        self assert: doc isString.    self assert: doc isEmpty not.    self assert: (doc includesSubstring: 'Class:').! !Object subclass: #PharoDocGenerator	instanceVariableNames: 'package'	classVariableNames: ''	package: 'PharoDoc'!!PharoDocGenerator methodsFor: 'gen' stamp: 'bookcollect 1/11/2025 14:42'!generateDocumentation    | stream |    self validatePackage.    stream := WriteStream on: String new.    self package classes do: [ :class |        stream             nextPutAll: (self generateClassDocumentation: class);            cr; cr ].    ^ stream contents! !!PharoDocGenerator methodsFor: 'gen' stamp: 'bookcollect 1/11/2025 14:38'!generateClassDocumentation: aClass    | stream |    stream := WriteStream on: String new.        "Class name and summary"    stream         nextPutAll: '=== Class: ';        nextPutAll: aClass name;        cr; cr.            "Superclass"    stream         nextPutAll: 'Superclass: ';        nextPutAll: aClass superclass name;        cr; cr.            "Subclasses"    stream         nextPutAll: 'Subclasses: ';        cr.    aClass subclasses         ifEmpty: [ stream nextPutAll: 'None'; cr ]        ifNotEmpty: [             aClass subclasses do: [ :subclass |                stream                     nextPutAll: '- ';                    nextPutAll: subclass name;                    cr ] ].    stream cr.        "Instance variables"    stream         nextPutAll: 'Instance Variables: ';        cr.    aClass instVarNames         ifEmpty: [ stream nextPutAll: 'None'; cr ]        ifNotEmpty: [             aClass instVarNames do: [ :var |                stream                     nextPutAll: '- ';                    nextPutAll: var;                    cr ] ].    stream cr.        "Methods"    stream         nextPutAll: 'Methods:';        cr.    aClass methods do: [ :method |        stream             nextPutAll: '- ';            nextPutAll: method selector;            cr.        method comment ifNotNil: [ :comment |            stream                 nextPutAll: '  Comment: ';                nextPutAll: comment;                cr ] ].                    ^ stream contents! !!PharoDocGenerator methodsFor: 'accessing' stamp: 'bookcollect 1/11/2025 14:37'!package    ^ package! !!PharoDocGenerator methodsFor: 'accessing' stamp: 'bookcollect 1/11/2025 14:42'!package: aPackage    "Set the package to document. aPackage can be either a string (package name) or an RPackage instance"    package := aPackage isString         ifTrue: [ RPackage organizer packageNamed: aPackage ]        ifFalse: [ aPackage ]! !!PharoDocGenerator methodsFor: 'val' stamp: 'bookcollect 1/11/2025 14:41'!validatePackage    package ifNil: [ Error signal: 'Package must be set before generating documentation' ].    (package isKindOf: RPackage)         ifFalse: [ Error signal: 'Package must be a valid RPackage instance' ]! !!PharoDocGenerator methodsFor: 'initialization' stamp: 'bookcollect 1/11/2025 14:37'!initialize    super initialize! !